/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.siriusdb.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Region告知Server TableMeta变化请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-05-26")
public class NotifyTableMetaChangeRequest implements org.apache.thrift.TBase<NotifyTableMetaChangeRequest, NotifyTableMetaChangeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyTableMetaChangeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyTableMetaChangeRequest");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_META_FIELD_DESC = new org.apache.thrift.protocol.TField("tableMeta", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotifyTableMetaChangeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotifyTableMetaChangeRequestTupleSchemeFactory());
  }

  public String tableName; // required
  public int operationCode; // required
  public com.siriusdb.thrift.model.VTableMeta tableMeta; // required
  public com.siriusdb.thrift.model.Base base; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "tableName"),
    OPERATION_CODE((short)2, "operationCode"),
    TABLE_META((short)3, "tableMeta"),
    BASE((short)255, "base");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 2: // OPERATION_CODE
          return OPERATION_CODE;
        case 3: // TABLE_META
          return TABLE_META;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATIONCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("operationCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLE_META, new org.apache.thrift.meta_data.FieldMetaData("tableMeta", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.siriusdb.thrift.model.VTableMeta.class)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.siriusdb.thrift.model.Base.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyTableMetaChangeRequest.class, metaDataMap);
  }

  public NotifyTableMetaChangeRequest() {
  }

  public NotifyTableMetaChangeRequest(
    String tableName,
    int operationCode,
    com.siriusdb.thrift.model.VTableMeta tableMeta,
    com.siriusdb.thrift.model.Base base)
  {
    this();
    this.tableName = tableName;
    this.operationCode = operationCode;
    setOperationCodeIsSet(true);
    this.tableMeta = tableMeta;
    this.base = base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotifyTableMetaChangeRequest(NotifyTableMetaChangeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.tableName = other.tableName;
    }
    this.operationCode = other.operationCode;
    if (other.isSetTableMeta()) {
      this.tableMeta = new com.siriusdb.thrift.model.VTableMeta(other.tableMeta);
    }
    if (other.isSetBase()) {
      this.base = new com.siriusdb.thrift.model.Base(other.base);
    }
  }

  public NotifyTableMetaChangeRequest deepCopy() {
    return new NotifyTableMetaChangeRequest(this);
  }

  @Override
  public void clear() {
    this.tableName = null;
    setOperationCodeIsSet(false);
    this.operationCode = 0;
    this.tableMeta = null;
    this.base = null;
  }

  public String getTableName() {
    return this.tableName;
  }

  public NotifyTableMetaChangeRequest setTableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  public int getOperationCode() {
    return this.operationCode;
  }

  public NotifyTableMetaChangeRequest setOperationCode(int operationCode) {
    this.operationCode = operationCode;
    setOperationCodeIsSet(true);
    return this;
  }

  public void unsetOperationCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID);
  }

  /** Returns true if field operationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationCode() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID);
  }

  public void setOperationCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID, value);
  }

  public com.siriusdb.thrift.model.VTableMeta getTableMeta() {
    return this.tableMeta;
  }

  public NotifyTableMetaChangeRequest setTableMeta(com.siriusdb.thrift.model.VTableMeta tableMeta) {
    this.tableMeta = tableMeta;
    return this;
  }

  public void unsetTableMeta() {
    this.tableMeta = null;
  }

  /** Returns true if field tableMeta is set (has been assigned a value) and false otherwise */
  public boolean isSetTableMeta() {
    return this.tableMeta != null;
  }

  public void setTableMetaIsSet(boolean value) {
    if (!value) {
      this.tableMeta = null;
    }
  }

  public com.siriusdb.thrift.model.Base getBase() {
    return this.base;
  }

  public NotifyTableMetaChangeRequest setBase(com.siriusdb.thrift.model.Base base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((String)value);
      }
      break;

    case OPERATION_CODE:
      if (value == null) {
        unsetOperationCode();
      } else {
        setOperationCode((Integer)value);
      }
      break;

    case TABLE_META:
      if (value == null) {
        unsetTableMeta();
      } else {
        setTableMeta((com.siriusdb.thrift.model.VTableMeta)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((com.siriusdb.thrift.model.Base)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case OPERATION_CODE:
      return getOperationCode();

    case TABLE_META:
      return getTableMeta();

    case BASE:
      return getBase();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case OPERATION_CODE:
      return isSetOperationCode();
    case TABLE_META:
      return isSetTableMeta();
    case BASE:
      return isSetBase();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotifyTableMetaChangeRequest)
      return this.equals((NotifyTableMetaChangeRequest)that);
    return false;
  }

  public boolean equals(NotifyTableMetaChangeRequest that) {
    if (that == null)
      return false;

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_operationCode = true;
    boolean that_present_operationCode = true;
    if (this_present_operationCode || that_present_operationCode) {
      if (!(this_present_operationCode && that_present_operationCode))
        return false;
      if (this.operationCode != that.operationCode)
        return false;
    }

    boolean this_present_tableMeta = true && this.isSetTableMeta();
    boolean that_present_tableMeta = true && that.isSetTableMeta();
    if (this_present_tableMeta || that_present_tableMeta) {
      if (!(this_present_tableMeta && that_present_tableMeta))
        return false;
      if (!this.tableMeta.equals(that.tableMeta))
        return false;
    }

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableName = true && (isSetTableName());
    list.add(present_tableName);
    if (present_tableName)
      list.add(tableName);

    boolean present_operationCode = true;
    list.add(present_operationCode);
    if (present_operationCode)
      list.add(operationCode);

    boolean present_tableMeta = true && (isSetTableMeta());
    list.add(present_tableMeta);
    if (present_tableMeta)
      list.add(tableMeta);

    boolean present_base = true && (isSetBase());
    list.add(present_base);
    if (present_base)
      list.add(base);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotifyTableMetaChangeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableName()).compareTo(other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationCode()).compareTo(other.isSetOperationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationCode, other.operationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTableMeta()).compareTo(other.isSetTableMeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableMeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableMeta, other.tableMeta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotifyTableMetaChangeRequest(");
    boolean first = true;

    sb.append("tableName:");
    if (this.tableName == null) {
      sb.append("null");
    } else {
      sb.append(this.tableName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationCode:");
    sb.append(this.operationCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tableMeta:");
    if (this.tableMeta == null) {
      sb.append("null");
    } else {
      sb.append(this.tableMeta);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tableName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'operationCode' because it's a primitive and you chose the non-beans generator.
    if (tableMeta == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableMeta' was not present! Struct: " + toString());
    }
    if (base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tableMeta != null) {
      tableMeta.validate();
    }
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotifyTableMetaChangeRequestStandardSchemeFactory implements SchemeFactory {
    public NotifyTableMetaChangeRequestStandardScheme getScheme() {
      return new NotifyTableMetaChangeRequestStandardScheme();
    }
  }

  private static class NotifyTableMetaChangeRequestStandardScheme extends StandardScheme<NotifyTableMetaChangeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyTableMetaChangeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationCode = iprot.readI32();
              struct.setOperationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_META
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tableMeta = new com.siriusdb.thrift.model.VTableMeta();
              struct.tableMeta.read(iprot);
              struct.setTableMetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new com.siriusdb.thrift.model.Base();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperationCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operationCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyTableMetaChangeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableName != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(struct.tableName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATION_CODE_FIELD_DESC);
      oprot.writeI32(struct.operationCode);
      oprot.writeFieldEnd();
      if (struct.tableMeta != null) {
        oprot.writeFieldBegin(TABLE_META_FIELD_DESC);
        struct.tableMeta.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotifyTableMetaChangeRequestTupleSchemeFactory implements SchemeFactory {
    public NotifyTableMetaChangeRequestTupleScheme getScheme() {
      return new NotifyTableMetaChangeRequestTupleScheme();
    }
  }

  private static class NotifyTableMetaChangeRequestTupleScheme extends TupleScheme<NotifyTableMetaChangeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotifyTableMetaChangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.tableName);
      oprot.writeI32(struct.operationCode);
      struct.tableMeta.write(oprot);
      struct.base.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotifyTableMetaChangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.tableName = iprot.readString();
      struct.setTableNameIsSet(true);
      struct.operationCode = iprot.readI32();
      struct.setOperationCodeIsSet(true);
      struct.tableMeta = new com.siriusdb.thrift.model.VTableMeta();
      struct.tableMeta.read(iprot);
      struct.setTableMetaIsSet(true);
      struct.base = new com.siriusdb.thrift.model.Base();
      struct.base.read(iprot);
      struct.setBaseIsSet(true);
    }
  }

}

