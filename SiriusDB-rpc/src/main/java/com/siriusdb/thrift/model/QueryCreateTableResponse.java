/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.siriusdb.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 响应体：向Master请求创建一个表格
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-05-30")
public class QueryCreateTableResponse implements org.apache.thrift.TBase<QueryCreateTableResponse, QueryCreateTableResponse._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCreateTableResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCreateTableResponse");

  private static final org.apache.thrift.protocol.TField LOCATED_SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locatedServerName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATED_SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("locatedServerUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("baseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryCreateTableResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryCreateTableResponseTupleSchemeFactory());
  }

  public String locatedServerName; // required
  public String locatedServerUrl; // required
  public com.siriusdb.thrift.model.BaseResp baseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATED_SERVER_NAME((short)1, "locatedServerName"),
    LOCATED_SERVER_URL((short)2, "locatedServerUrl"),
    BASE_RESP((short)255, "baseResp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATED_SERVER_NAME
          return LOCATED_SERVER_NAME;
        case 2: // LOCATED_SERVER_URL
          return LOCATED_SERVER_URL;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATED_SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("locatedServerName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCATED_SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("locatedServerUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("baseResp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.siriusdb.thrift.model.BaseResp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCreateTableResponse.class, metaDataMap);
  }

  public QueryCreateTableResponse() {
  }

  public QueryCreateTableResponse(
    String locatedServerName,
    String locatedServerUrl,
    com.siriusdb.thrift.model.BaseResp baseResp)
  {
    this();
    this.locatedServerName = locatedServerName;
    this.locatedServerUrl = locatedServerUrl;
    this.baseResp = baseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryCreateTableResponse(QueryCreateTableResponse other) {
    if (other.isSetLocatedServerName()) {
      this.locatedServerName = other.locatedServerName;
    }
    if (other.isSetLocatedServerUrl()) {
      this.locatedServerUrl = other.locatedServerUrl;
    }
    if (other.isSetBaseResp()) {
      this.baseResp = new com.siriusdb.thrift.model.BaseResp(other.baseResp);
    }
  }

  public QueryCreateTableResponse deepCopy() {
    return new QueryCreateTableResponse(this);
  }

  @Override
  public void clear() {
    this.locatedServerName = null;
    this.locatedServerUrl = null;
    this.baseResp = null;
  }

  public String getLocatedServerName() {
    return this.locatedServerName;
  }

  public QueryCreateTableResponse setLocatedServerName(String locatedServerName) {
    this.locatedServerName = locatedServerName;
    return this;
  }

  public void unsetLocatedServerName() {
    this.locatedServerName = null;
  }

  /** Returns true if field locatedServerName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocatedServerName() {
    return this.locatedServerName != null;
  }

  public void setLocatedServerNameIsSet(boolean value) {
    if (!value) {
      this.locatedServerName = null;
    }
  }

  public String getLocatedServerUrl() {
    return this.locatedServerUrl;
  }

  public QueryCreateTableResponse setLocatedServerUrl(String locatedServerUrl) {
    this.locatedServerUrl = locatedServerUrl;
    return this;
  }

  public void unsetLocatedServerUrl() {
    this.locatedServerUrl = null;
  }

  /** Returns true if field locatedServerUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetLocatedServerUrl() {
    return this.locatedServerUrl != null;
  }

  public void setLocatedServerUrlIsSet(boolean value) {
    if (!value) {
      this.locatedServerUrl = null;
    }
  }

  public com.siriusdb.thrift.model.BaseResp getBaseResp() {
    return this.baseResp;
  }

  public QueryCreateTableResponse setBaseResp(com.siriusdb.thrift.model.BaseResp baseResp) {
    this.baseResp = baseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.baseResp = null;
  }

  /** Returns true if field baseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.baseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.baseResp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOCATED_SERVER_NAME:
      if (value == null) {
        unsetLocatedServerName();
      } else {
        setLocatedServerName((String)value);
      }
      break;

    case LOCATED_SERVER_URL:
      if (value == null) {
        unsetLocatedServerUrl();
      } else {
        setLocatedServerUrl((String)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((com.siriusdb.thrift.model.BaseResp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATED_SERVER_NAME:
      return getLocatedServerName();

    case LOCATED_SERVER_URL:
      return getLocatedServerUrl();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOCATED_SERVER_NAME:
      return isSetLocatedServerName();
    case LOCATED_SERVER_URL:
      return isSetLocatedServerUrl();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryCreateTableResponse)
      return this.equals((QueryCreateTableResponse)that);
    return false;
  }

  public boolean equals(QueryCreateTableResponse that) {
    if (that == null)
      return false;

    boolean this_present_locatedServerName = true && this.isSetLocatedServerName();
    boolean that_present_locatedServerName = true && that.isSetLocatedServerName();
    if (this_present_locatedServerName || that_present_locatedServerName) {
      if (!(this_present_locatedServerName && that_present_locatedServerName))
        return false;
      if (!this.locatedServerName.equals(that.locatedServerName))
        return false;
    }

    boolean this_present_locatedServerUrl = true && this.isSetLocatedServerUrl();
    boolean that_present_locatedServerUrl = true && that.isSetLocatedServerUrl();
    if (this_present_locatedServerUrl || that_present_locatedServerUrl) {
      if (!(this_present_locatedServerUrl && that_present_locatedServerUrl))
        return false;
      if (!this.locatedServerUrl.equals(that.locatedServerUrl))
        return false;
    }

    boolean this_present_baseResp = true && this.isSetBaseResp();
    boolean that_present_baseResp = true && that.isSetBaseResp();
    if (this_present_baseResp || that_present_baseResp) {
      if (!(this_present_baseResp && that_present_baseResp))
        return false;
      if (!this.baseResp.equals(that.baseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_locatedServerName = true && (isSetLocatedServerName());
    list.add(present_locatedServerName);
    if (present_locatedServerName)
      list.add(locatedServerName);

    boolean present_locatedServerUrl = true && (isSetLocatedServerUrl());
    list.add(present_locatedServerUrl);
    if (present_locatedServerUrl)
      list.add(locatedServerUrl);

    boolean present_baseResp = true && (isSetBaseResp());
    list.add(present_baseResp);
    if (present_baseResp)
      list.add(baseResp);

    return list.hashCode();
  }

  @Override
  public int compareTo(QueryCreateTableResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLocatedServerName()).compareTo(other.isSetLocatedServerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocatedServerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locatedServerName, other.locatedServerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocatedServerUrl()).compareTo(other.isSetLocatedServerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocatedServerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locatedServerUrl, other.locatedServerUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseResp, other.baseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryCreateTableResponse(");
    boolean first = true;

    sb.append("locatedServerName:");
    if (this.locatedServerName == null) {
      sb.append("null");
    } else {
      sb.append(this.locatedServerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("locatedServerUrl:");
    if (this.locatedServerUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.locatedServerUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseResp:");
    if (this.baseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.baseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (locatedServerName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locatedServerName' was not present! Struct: " + toString());
    }
    if (locatedServerUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'locatedServerUrl' was not present! Struct: " + toString());
    }
    if (baseResp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'baseResp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (baseResp != null) {
      baseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryCreateTableResponseStandardSchemeFactory implements SchemeFactory {
    public QueryCreateTableResponseStandardScheme getScheme() {
      return new QueryCreateTableResponseStandardScheme();
    }
  }

  private static class QueryCreateTableResponseStandardScheme extends StandardScheme<QueryCreateTableResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCreateTableResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATED_SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locatedServerName = iprot.readString();
              struct.setLocatedServerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATED_SERVER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locatedServerUrl = iprot.readString();
              struct.setLocatedServerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseResp = new com.siriusdb.thrift.model.BaseResp();
              struct.baseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCreateTableResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.locatedServerName != null) {
        oprot.writeFieldBegin(LOCATED_SERVER_NAME_FIELD_DESC);
        oprot.writeString(struct.locatedServerName);
        oprot.writeFieldEnd();
      }
      if (struct.locatedServerUrl != null) {
        oprot.writeFieldBegin(LOCATED_SERVER_URL_FIELD_DESC);
        oprot.writeString(struct.locatedServerUrl);
        oprot.writeFieldEnd();
      }
      if (struct.baseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.baseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryCreateTableResponseTupleSchemeFactory implements SchemeFactory {
    public QueryCreateTableResponseTupleScheme getScheme() {
      return new QueryCreateTableResponseTupleScheme();
    }
  }

  private static class QueryCreateTableResponseTupleScheme extends TupleScheme<QueryCreateTableResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryCreateTableResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.locatedServerName);
      oprot.writeString(struct.locatedServerUrl);
      struct.baseResp.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryCreateTableResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.locatedServerName = iprot.readString();
      struct.setLocatedServerNameIsSet(true);
      struct.locatedServerUrl = iprot.readString();
      struct.setLocatedServerUrlIsSet(true);
      struct.baseResp = new com.siriusdb.thrift.model.BaseResp();
      struct.baseResp.read(iprot);
      struct.setBaseRespIsSet(true);
    }
  }

}

