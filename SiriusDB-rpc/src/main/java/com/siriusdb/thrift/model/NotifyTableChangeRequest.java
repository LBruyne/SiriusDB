/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.siriusdb.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A告知B Table变化请求
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-05-30")
public class NotifyTableChangeRequest implements org.apache.thrift.TBase<NotifyTableChangeRequest, NotifyTableChangeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyTableChangeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyTableChangeRequest");

  private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("tableNames", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("operationCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tables", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotifyTableChangeRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotifyTableChangeRequestTupleSchemeFactory());
  }

  public List<String> tableNames; // required
  public int operationCode; // required
  public List<com.siriusdb.thrift.model.VTable> tables; // required
  public com.siriusdb.thrift.model.Base base; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAMES((short)1, "tableNames"),
    OPERATION_CODE((short)2, "operationCode"),
    TABLES((short)3, "tables"),
    BASE((short)255, "base");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAMES
          return TABLE_NAMES;
        case 2: // OPERATION_CODE
          return OPERATION_CODE;
        case 3: // TABLES
          return TABLES;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERATIONCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("tableNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATION_CODE, new org.apache.thrift.meta_data.FieldMetaData("operationCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLES, new org.apache.thrift.meta_data.FieldMetaData("tables", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.siriusdb.thrift.model.VTable.class))));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.siriusdb.thrift.model.Base.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyTableChangeRequest.class, metaDataMap);
  }

  public NotifyTableChangeRequest() {
  }

  public NotifyTableChangeRequest(
    List<String> tableNames,
    int operationCode,
    List<com.siriusdb.thrift.model.VTable> tables,
    com.siriusdb.thrift.model.Base base)
  {
    this();
    this.tableNames = tableNames;
    this.operationCode = operationCode;
    setOperationCodeIsSet(true);
    this.tables = tables;
    this.base = base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotifyTableChangeRequest(NotifyTableChangeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableNames()) {
      List<String> __this__tableNames = new ArrayList<String>(other.tableNames);
      this.tableNames = __this__tableNames;
    }
    this.operationCode = other.operationCode;
    if (other.isSetTables()) {
      List<com.siriusdb.thrift.model.VTable> __this__tables = new ArrayList<com.siriusdb.thrift.model.VTable>(other.tables.size());
      for (com.siriusdb.thrift.model.VTable other_element : other.tables) {
        __this__tables.add(new com.siriusdb.thrift.model.VTable(other_element));
      }
      this.tables = __this__tables;
    }
    if (other.isSetBase()) {
      this.base = new com.siriusdb.thrift.model.Base(other.base);
    }
  }

  public NotifyTableChangeRequest deepCopy() {
    return new NotifyTableChangeRequest(this);
  }

  @Override
  public void clear() {
    this.tableNames = null;
    setOperationCodeIsSet(false);
    this.operationCode = 0;
    this.tables = null;
    this.base = null;
  }

  public int getTableNamesSize() {
    return (this.tableNames == null) ? 0 : this.tableNames.size();
  }

  public java.util.Iterator<String> getTableNamesIterator() {
    return (this.tableNames == null) ? null : this.tableNames.iterator();
  }

  public void addToTableNames(String elem) {
    if (this.tableNames == null) {
      this.tableNames = new ArrayList<String>();
    }
    this.tableNames.add(elem);
  }

  public List<String> getTableNames() {
    return this.tableNames;
  }

  public NotifyTableChangeRequest setTableNames(List<String> tableNames) {
    this.tableNames = tableNames;
    return this;
  }

  public void unsetTableNames() {
    this.tableNames = null;
  }

  /** Returns true if field tableNames is set (has been assigned a value) and false otherwise */
  public boolean isSetTableNames() {
    return this.tableNames != null;
  }

  public void setTableNamesIsSet(boolean value) {
    if (!value) {
      this.tableNames = null;
    }
  }

  public int getOperationCode() {
    return this.operationCode;
  }

  public NotifyTableChangeRequest setOperationCode(int operationCode) {
    this.operationCode = operationCode;
    setOperationCodeIsSet(true);
    return this;
  }

  public void unsetOperationCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID);
  }

  /** Returns true if field operationCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationCode() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID);
  }

  public void setOperationCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATIONCODE_ISSET_ID, value);
  }

  public int getTablesSize() {
    return (this.tables == null) ? 0 : this.tables.size();
  }

  public java.util.Iterator<com.siriusdb.thrift.model.VTable> getTablesIterator() {
    return (this.tables == null) ? null : this.tables.iterator();
  }

  public void addToTables(com.siriusdb.thrift.model.VTable elem) {
    if (this.tables == null) {
      this.tables = new ArrayList<com.siriusdb.thrift.model.VTable>();
    }
    this.tables.add(elem);
  }

  public List<com.siriusdb.thrift.model.VTable> getTables() {
    return this.tables;
  }

  public NotifyTableChangeRequest setTables(List<com.siriusdb.thrift.model.VTable> tables) {
    this.tables = tables;
    return this;
  }

  public void unsetTables() {
    this.tables = null;
  }

  /** Returns true if field tables is set (has been assigned a value) and false otherwise */
  public boolean isSetTables() {
    return this.tables != null;
  }

  public void setTablesIsSet(boolean value) {
    if (!value) {
      this.tables = null;
    }
  }

  public com.siriusdb.thrift.model.Base getBase() {
    return this.base;
  }

  public NotifyTableChangeRequest setBase(com.siriusdb.thrift.model.Base base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLE_NAMES:
      if (value == null) {
        unsetTableNames();
      } else {
        setTableNames((List<String>)value);
      }
      break;

    case OPERATION_CODE:
      if (value == null) {
        unsetOperationCode();
      } else {
        setOperationCode((Integer)value);
      }
      break;

    case TABLES:
      if (value == null) {
        unsetTables();
      } else {
        setTables((List<com.siriusdb.thrift.model.VTable>)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((com.siriusdb.thrift.model.Base)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAMES:
      return getTableNames();

    case OPERATION_CODE:
      return getOperationCode();

    case TABLES:
      return getTables();

    case BASE:
      return getBase();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAMES:
      return isSetTableNames();
    case OPERATION_CODE:
      return isSetOperationCode();
    case TABLES:
      return isSetTables();
    case BASE:
      return isSetBase();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotifyTableChangeRequest)
      return this.equals((NotifyTableChangeRequest)that);
    return false;
  }

  public boolean equals(NotifyTableChangeRequest that) {
    if (that == null)
      return false;

    boolean this_present_tableNames = true && this.isSetTableNames();
    boolean that_present_tableNames = true && that.isSetTableNames();
    if (this_present_tableNames || that_present_tableNames) {
      if (!(this_present_tableNames && that_present_tableNames))
        return false;
      if (!this.tableNames.equals(that.tableNames))
        return false;
    }

    boolean this_present_operationCode = true;
    boolean that_present_operationCode = true;
    if (this_present_operationCode || that_present_operationCode) {
      if (!(this_present_operationCode && that_present_operationCode))
        return false;
      if (this.operationCode != that.operationCode)
        return false;
    }

    boolean this_present_tables = true && this.isSetTables();
    boolean that_present_tables = true && that.isSetTables();
    if (this_present_tables || that_present_tables) {
      if (!(this_present_tables && that_present_tables))
        return false;
      if (!this.tables.equals(that.tables))
        return false;
    }

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tableNames = true && (isSetTableNames());
    list.add(present_tableNames);
    if (present_tableNames)
      list.add(tableNames);

    boolean present_operationCode = true;
    list.add(present_operationCode);
    if (present_operationCode)
      list.add(operationCode);

    boolean present_tables = true && (isSetTables());
    list.add(present_tables);
    if (present_tables)
      list.add(tables);

    boolean present_base = true && (isSetBase());
    list.add(present_base);
    if (present_base)
      list.add(base);

    return list.hashCode();
  }

  @Override
  public int compareTo(NotifyTableChangeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTableNames()).compareTo(other.isSetTableNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableNames, other.tableNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperationCode()).compareTo(other.isSetOperationCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operationCode, other.operationCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTables()).compareTo(other.isSetTables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tables, other.tables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotifyTableChangeRequest(");
    boolean first = true;

    sb.append("tableNames:");
    if (this.tableNames == null) {
      sb.append("null");
    } else {
      sb.append(this.tableNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationCode:");
    sb.append(this.operationCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tables:");
    if (this.tables == null) {
      sb.append("null");
    } else {
      sb.append(this.tables);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (tableNames == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tableNames' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'operationCode' because it's a primitive and you chose the non-beans generator.
    if (tables == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tables' was not present! Struct: " + toString());
    }
    if (base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotifyTableChangeRequestStandardSchemeFactory implements SchemeFactory {
    public NotifyTableChangeRequestStandardScheme getScheme() {
      return new NotifyTableChangeRequestStandardScheme();
    }
  }

  private static class NotifyTableChangeRequestStandardScheme extends StandardScheme<NotifyTableChangeRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyTableChangeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.tableNames = new ArrayList<String>(_list32.size);
                String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.tableNames.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setTableNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operationCode = iprot.readI32();
              struct.setOperationCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.tables = new ArrayList<com.siriusdb.thrift.model.VTable>(_list35.size);
                com.siriusdb.thrift.model.VTable _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new com.siriusdb.thrift.model.VTable();
                  _elem36.read(iprot);
                  struct.tables.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setTablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new com.siriusdb.thrift.model.Base();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperationCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operationCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyTableChangeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tableNames != null) {
        oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tableNames.size()));
          for (String _iter38 : struct.tableNames)
          {
            oprot.writeString(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATION_CODE_FIELD_DESC);
      oprot.writeI32(struct.operationCode);
      oprot.writeFieldEnd();
      if (struct.tables != null) {
        oprot.writeFieldBegin(TABLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tables.size()));
          for (com.siriusdb.thrift.model.VTable _iter39 : struct.tables)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotifyTableChangeRequestTupleSchemeFactory implements SchemeFactory {
    public NotifyTableChangeRequestTupleScheme getScheme() {
      return new NotifyTableChangeRequestTupleScheme();
    }
  }

  private static class NotifyTableChangeRequestTupleScheme extends TupleScheme<NotifyTableChangeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotifyTableChangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.tableNames.size());
        for (String _iter40 : struct.tableNames)
        {
          oprot.writeString(_iter40);
        }
      }
      oprot.writeI32(struct.operationCode);
      {
        oprot.writeI32(struct.tables.size());
        for (com.siriusdb.thrift.model.VTable _iter41 : struct.tables)
        {
          _iter41.write(oprot);
        }
      }
      struct.base.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotifyTableChangeRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.tableNames = new ArrayList<String>(_list42.size);
        String _elem43;
        for (int _i44 = 0; _i44 < _list42.size; ++_i44)
        {
          _elem43 = iprot.readString();
          struct.tableNames.add(_elem43);
        }
      }
      struct.setTableNamesIsSet(true);
      struct.operationCode = iprot.readI32();
      struct.setOperationCodeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.tables = new ArrayList<com.siriusdb.thrift.model.VTable>(_list45.size);
        com.siriusdb.thrift.model.VTable _elem46;
        for (int _i47 = 0; _i47 < _list45.size; ++_i47)
        {
          _elem46 = new com.siriusdb.thrift.model.VTable();
          _elem46.read(iprot);
          struct.tables.add(_elem46);
        }
      }
      struct.setTablesIsSet(true);
      struct.base = new com.siriusdb.thrift.model.Base();
      struct.base.read(iprot);
      struct.setBaseIsSet(true);
    }
  }

}

